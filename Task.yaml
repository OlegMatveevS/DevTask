apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-web-app
spec:
  replicas: 4 # Результаты нагрузочного тестирования показали, что 4 пода справляются с пиковой нагрузкой
  strategy:
    rollingUpdate:
      maxSurge: 1 # Увеличиваем количество подов на 1 при обновлении, чтобы сохранить отказоустойчивость
      maxUnavailable: 0 # Всегда хотим иметь доступные поды при обновлении
  selector:
    matchLabels:
      app: my-web-app
  template:
    metadata:
      labels:
        app: my-web-app
    spec:
      # Распределение подов по разным зонам для обеспечения максимальной отказоустойчивости
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - my-web-app
              topologyKey: "failure-domain.beta.kubernetes.io/zone"
      containers:
        - name: my-web-app
          image: my-web-app:v1
          resources:
            requests:
              cpu: "0.5" # Запрос на больше ресурсов CPU для первых запросов
              memory: "128Mi" # Ровное потребление памяти в районе 128M
            limits:
              cpu: "1" Ограничение потребления CPU
              memory: "256Mi" Ограничение потребления памяти
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 10 # Учитываем время инициализации приложения (5-10 секунд)
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15 # Учитываем время инициализации приложения (5-10 секунд)
            periodSeconds: 5
          # Передача в приложение через переменные окружения (безопасный способ обращения с секретными данными).  
          env:
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: my-web-app-secrets
                  key: db_username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: my-web-app-secrets
                  key: db_password
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: my-web-app-config
---
apiVersion: v1
kind: Service
metadata:
  name: my-web-app
spec:
  selector:
    app: my-web-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer # Используем LoadBalancer для распределения нагрузки между подами
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-web-app-config
data:
  app-config.yaml: |
    logLevel: info
    database:
      host: db.test.com
      port: 5432
---
apiVersion: v1
kind: Secret
metadata:
  name: my-web-app-secrets
type: Opaque
data:
  db_username: dGVzdA== # base64 (=test)
  db_password: dGVzdA== # base64 (=test)
